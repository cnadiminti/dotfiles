#!/usr/bin/env bash

UTF_8_HEAVY_BALLOT_X='\xe2\x9c\x98'
UTF_8_HEAVY_CHECK_MARK='\xe2\x9c\x94'
UTF_8_HEAVY_WARNING_SIGN='\xe2\x9a\xa0'
UTF_8_INFORMATION_SOURCE='\xe2\x84\xb9'
UTF_8_BLACK_RIGHT_POINTING_INDEX='\xE2\x98\x9B'

function print_available_terminal_colors {
    T='gYw'   # The test text
    echo -e "\n                 40m     41m     42m     43m\
     44m     45m     46m     47m";
    for FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m' \
           '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' \
           '  36m' '1;36m' '  37m' '1;37m';
        do FG=${FGs// /}
        echo -en " $FGs \033[$FG  $T  "
        for BG in 40m 41m 42m 43m 44m 45m 46m 47m;
            do echo -en "$EINS \033[$FG\033[$BG  $T  \033[0m";
        done
        echo;
    done
    echo
}

function print_task {
    echo -e "${UTF_8_BLACK_RIGHT_POINTING_INDEX} $1"
}

function print_success {
    echo -e "\033[01;32m ${UTF_8_HEAVY_CHECK_MARK}   \033[00m"
}

function print_info {
    echo -e "\033[01;34m ${UTF_8_INFORMATION_SOURCE}   $*\033[00m"
}

function print_warning {
    echo -e "\033[01;33m ${UTF_8_HEAVY_WARNING_SIGN}   $*\033[00m"
}

function print_error {
    echo -e "\033[01;31m ${UTF_8_HEAVY_BALLOT_X}   $*\033[00m"
}

function execute_command {
    usage="execute-command CMD [BANNER] [error/warning]"
    [ -z "$1" ] && echo "$usage" && return
    cmd=$1
    banner=${2-$1}
    reporter=${3-error}
    [ "$reporter" != "error" ] \
        && [ "$reporter" != "warning" ] \
        && echo "$usage" \
        && return
    echo -n "${banner} ..."
    error=$($cmd 2>&1 >/dev/null)
    status=$?
    if [ $status -eq 0 ]; then
        print_success
    else
        print_"${reporter}" "$error"
    fi
    return $status
}

# Usage example: clone_github_user_repos cnadiminti
function clone_github_user_repos {
    user=${1-cnadiminti}
    execute_command "mkdir -p $user"
    last_page=$(curl -Iks https://api.github.com/users/"$user"/repos | grep Link: | awk -F'=|>' '{ print $5 }')
    for p in $(seq 1 "$last_page"); do
        print_task "Working on page# $p"
        for repo in $(curl -ks https://api.github.com/users/"$user"/repos?page="$p" | ruby -rrubygems -e 'require "json"; JSON.load(STDIN.read).each { |repo| puts repo["ssh_url"] }'); do
            execute_command "git -C $user clone -q $repo"
        done
    done
}

# Usage example: clone_github_org_repos sensu
function clone_github_org_repos {
    org=$1
    if [ -z "$org" ] ; then
          print_info 'Usage: clone_github_org_repos [ORG-NAME]'
          return
    fi
    execute_command "mkdir -p $org"
    last_page=$(curl -Iks https://api.github.com/orgs/"$org"/repos | grep Link: | awk -F'=|>' '{ print $5 }')
    for p in $(seq 1 "$last_page"); do
        print_task "Working on page# $p"
        for repo in $(curl -ks https://api.github.com/orgs/"$org"/repos?page="$p" | ruby -rrubygems -e 'require "json"; JSON.load(STDIN.read).each { |repo| puts repo["clone_url"] }'); do
            execute_command "git -C $org clone -q $repo"
        done
    done
}

function git_project_fetch {
    for f in "$1"/*; do
        print_task "$f"
        if execute_command "[ -d $f ]" "  Is Directory?" "warning"; then
            if execute_command "git -C $f rev-parse" "  Is git repo?" "warning"; then
                execute_command "git -C $f fetch" "  Fetching"
            fi
        fi
    done
}

function git_project_pull {
    for f in "$1"/*; do
        print_task "$f"
        if execute_command "[ -d $f ]" "  Is Directory?" "warning"; then
            if execute_command "git -C $f rev-parse" "  Is git repo?" "warning"; then
                execute_command "git -C $f pull" "  Pulling"
            fi
        fi
    done
}

function clone_bitbucket_proj {
    proj=$1
    if [ -z "$proj" ] ; then
          print_info 'Usage: clone_bitbucket_proj [PROJECT-NAME]'
          return
    fi
    if [ -z "$BITBUCKET_HOST" ]; then
        echo -n "Please enter your Bitbucket Host: "
        read -r BITBUCKET_HOST
    fi
    if [ -z "$BITBUCKET_USER" ]; then
        echo -n "Please enter your Bitbucket Username: "
        read -r BITBUCKET_USER
    fi
    if [ -z "$BITBUCKET_PASS" ]; then
        echo -n "Please enter your Bitbucket Password: "
        read -sr BITBUCKET_PASS
        echo ''
    fi
    execute_command "mkdir -p $proj"
    isLastPage=false
    start=0
    while [ "$isLastPage" == "false" ]; do
        json=$(curl -sk -u "${BITBUCKET_USER}:${BITBUCKET_PASS}" -H "Content-Type: application/json" "${BITBUCKET_HOST}/rest/api/1.0/projects/$proj/repos?start=${start}")
        isLastPage=$(echo "$json" | ruby -rrubygems -e 'require "json"; puts JSON.load(STDIN.read)["isLastPage"]')
        start=$(echo "$json" | ruby -rrubygems -e 'require "json"; puts JSON.load(STDIN.read)["nextPageStart"]')
        for repo in $(echo "$json" | ruby -rrubygems -e 'require "json"; JSON.load(STDIN.read)["values"].each { |repo| repo["links"]["clone"].each { |url|  puts url["href"] if (url["name"] = "ssh" and url["href"].match('/^ssh/')) }}'); do
            execute_command "git -C $proj clone -q $repo"
        done
    done
}

function system_info {
    export SYS_OS_NAME=$(uname -s)
    export SYS_OS_RELEASE=$(uname -r)
    export SYS_OS_VERSION=$(uname -v)
    export SYS_HARDWARE_NAME=$(uname -m)
    export SYS_PROCESSOR_TYPE=$(uname -p)

    if [ "${SYS_OS_NAME}" = "Linux" ] ; then
        if [ -f /etc/redhat-release ]; then
            export SYS_OS_TYPE=redhat
        elif [ -f /etc/system-release ]; then
            export SYS_OS_TYPE=redhat
        elif [ -f /etc/debian_version ]; then
            export SYS_OS_TYPE=debian
        elif [ -f /etc/SuSE-release ]; then
            export SYS_OS_TYPE=suse
        fi

        if [ -r /etc/os-release ] ; then
            # shellcheck disable=SC1091
            export SYS_OS_DIST_NAME=$(source /etc/os-release && echo "$NAME")
            # shellcheck disable=SC1091
            export SYS_OS_DIST_ID=$(source /etc/os-release && echo "$ID")
            # shellcheck disable=SC1091
            export SYS_OS_DIST_VERSION=$(source /etc/os-release && echo "$VERSION_ID")
        fi
    elif [ "${SYS_OS_NAME}" = "Darwin" ]; then
        export SYS_OS_DIST_ID=$(sw_vers | grep ProductName | sed 's/ProductName:[ ]*//' | xargs)
        export SYS_OS_DIST_VERSION=$(sw_vers | grep ProductVersion | sed 's/ProductVersion:[ ]*//'| xargs)
    fi

    if [ "$1" = "-v" ]; then
        echo "SYS_OS_NAME=$SYS_OS_NAME"
        echo "SYS_OS_TYPE=$SYS_OS_TYPE"
        echo "SYS_OS_RELEASE=$SYS_OS_RELEASE"
        echo "SYS_OS_VERSION=$SYS_OS_VERSION"
        echo "SYS_HARDWARE_NAME=$SYS_HARDWARE_NAME"
        echo "SYS_PROCESSOR_TYPE=$SYS_PROCESSOR_TYPE"
        echo "SYS_OS_DIST_NAME=$SYS_OS_DIST_NAME"
        echo "SYS_OS_DIST_ID=$SYS_OS_DIST_ID"
        echo "SYS_OS_DIST_VERSION=$SYS_OS_DIST_VERSION"
    fi
}

function brew_cleanup {
    brew cleanup
    brew cask cleanup
    brew uninstall "$(brew list)" || true
    brew cask uninstall "$(brew cask list)" || true
    brew prune
}

function aws_mfa {
  if [[ $# -ne 2 ]]; then
    echo "Usage: $0 <MFA_TOKEN_CODE> <AWS_CLI_PROFILE>"
    echo "Where:"
    echo "   <AWS_CLI_PROFILE> = aws-cli profile usually in $HOME/.aws/config"
    echo "   <MFA_TOKEN_CODE> = Code from virtual MFA device"
    return
  fi

  token=$1
  profile=${2-default}
  serial_number=$(aws --profile "$profile" iam list-mfa-devices --output text | awk '{print $3}')
  echo "MFA Device ARN: $serial_number"
  if [[ -n $token && -n $serial_number ]]; then
    output=$(aws --profile "$profile" sts get-session-token \
      --serial-number "$serial_number" \
      --token-code "$token" \
      --duration 129600 \
      --output text |
      awk '{printf("export AWS_ACCESS_KEY_ID=\"%s\"\nexport AWS_SECRET_ACCESS_KEY=\"%s\"\nexport AWS_SESSION_TOKEN=\"%s\"\nexport AWS_SESSION_TOKEN=\"%s\"\n",$2,$4,$5,$5)}')
    eval "$output"
    echo "$output"
  else
    echo "TODO: fix it"
  fi
}

function jwt_token_decode {
  jq -R 'split(".") | .[1] | @base64d | fromjson' <<< "$1"
}
